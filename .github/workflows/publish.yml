# Package Publishing Workflow
# Triggers when GitHub releases are published (from any source) or manual dispatch
# Handles NPM publishing and release notes enhancement
#
# OPTIMIZATION: This workflow does the actual package building and publishing.
# The create-release workflow does validation to avoid redundant builds.

name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g., v1.0.0)"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
      tag_name: ${{ steps.extract.outputs.tag_name }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}
          fetch-depth: 0

      - name: 🎯 Extract release info
        id: extract
        run: |
          # Extract version from release tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag }}"
            VERSION="${TAG_NAME#v}"
            IS_PRERELEASE="false"
            # Check if it looks like a prerelease
            if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE="true"
            fi
          else
            TAG_NAME="${{ github.event.release.tag_name }}"
            VERSION="${TAG_NAME#v}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
          fi

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          echo "📋 Release Info:"
          echo "  Tag: $TAG_NAME"
          echo "  Version: $VERSION"
          echo "  Prerelease: $IS_PRERELEASE"
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "  Draft: ${{ github.event.release.draft }}"
          fi

      - name: ✅ Validate version format
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: x.y.z or x.y.z-prerelease"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  test:
    name: 🛡️ Test & Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-release

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}
          fetch-depth: 0

      - name: 🏗️ Setup project
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run tests
        run: pnpm test

      - name: 🔍 Type check
        run: pnpm typecheck

      - name: 🎨 Lint check
        run: pnpm lint

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, test]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: 🏗️ Setup project
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build package
        run: pnpm build

      - name: 📊 Bundle size check
        run: |
          cd packages/notebook-mdx
          if [ -f "dist/index.js" ]; then
            SIZE=$(wc -c < dist/index.js)
            SIZE_KB=$((SIZE / 1024))
            echo "📦 **Bundle Size Analysis for v${{ needs.validate-release.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
            echo "- Main bundle: ${SIZE_KB}KB (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
            
            # Check for other important files
            if [ -f "dist/client.js" ]; then
              CLIENT_SIZE=$(wc -c < dist/client.js)
              CLIENT_SIZE_KB=$((CLIENT_SIZE / 1024))
              echo "- Client bundle: ${CLIENT_SIZE_KB}KB (${CLIENT_SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f "dist/server.js" ]; then
              SERVER_SIZE=$(wc -c < dist/server.js)
              SERVER_SIZE_KB=$((SERVER_SIZE / 1024))
              echo "- Server bundle: ${SERVER_SIZE_KB}KB (${SERVER_SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Main bundle not found at expected location" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📦 Package verification
        run: |
          cd packages/notebook-mdx
          # Verify package contents
          npm pack --dry-run

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-build-${{ needs.validate-release.outputs.version }}
          path: |
            packages/notebook-mdx/dist/
            packages/notebook-mdx/package.json
            packages/notebook-mdx/README.md
          retention-days: 7

  publish-npm:
    name: 📦 Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, test, build]
    permissions:
      contents: write # Required for editing releases
      id-token: write # Required for npm provenance

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: 🏗️ Setup project
        uses: pnpm/action-setup@v4

      - name: 📦 Setup NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"
          always-auth: true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 💾 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-build-${{ needs.validate-release.outputs.version }}
          path: artifacts/

      - name: 📦 Restore build artifacts
        run: |
          cp -r artifacts/dist packages/notebook-mdx/
          cp artifacts/package.json packages/notebook-mdx/package.json
          cp artifacts/README.md packages/notebook-mdx/README.md

      - name: 🔐 Verify NPM authentication
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "❌ NPM_TOKEN is not set"
            exit 1
          fi
          echo "✅ NPM token is configured"

          # Test authentication
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🔄 Update package version
        run: |
          cd packages/notebook-mdx
          # Update version in package.json
          npm version ${{ needs.validate-release.outputs.version }} --no-git-tag-version

      - name: 🔍 Pre-publish validation
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          echo "🔍 Checking if notebook-mdx@$VERSION already exists..."

          if npm view "notebook-mdx@$VERSION" version 2>/dev/null; then
            echo "⚠️ notebook-mdx@$VERSION already exists on npm"
            echo "🔍 Existing version info:"
            npm view "notebook-mdx@$VERSION" --json 2>/dev/null | jq -r '.version, .publishedAt' || true
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
            echo "⏭️ This might be a workflow retry - skipping publication"
          else
            echo "✅ notebook-mdx@$VERSION is available for publishing"
            echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
          fi

      - name: 📦 Verify package contents
        if: env.SKIP_PUBLISH == 'false'
        run: |
          cd packages/notebook-mdx
          npm pack --dry-run

      - name: 📤 Publish to NPM (Latest)
        if: env.SKIP_PUBLISH == 'false' && needs.validate-release.outputs.is_prerelease == 'false'
        run: |
          cd packages/notebook-mdx
          echo "📦 Publishing stable version..."
          npm publish --tag latest --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📤 Publish to NPM (Prerelease)
        if: env.SKIP_PUBLISH == 'false' && needs.validate-release.outputs.is_prerelease == 'true'
        run: |
          cd packages/notebook-mdx
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG=beta
          if [[ "$VERSION" == *"alpha"* ]]; then
            TAG=alpha
          elif [[ "$VERSION" == *"rc"* ]]; then
            TAG=rc
          fi
          echo "📦 Publishing prerelease version with tag: $TAG"
          npm publish --tag $TAG --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: ✅ Verify publication
        if: env.SKIP_PUBLISH == 'false'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Function to verify package with retries
          max_attempts=5
          delay=10

          for attempt in $(seq 1 $max_attempts); do
            echo "🔍 Attempt $attempt/$max_attempts: Verifying notebook-mdx@$VERSION..."
            
            if npm view "notebook-mdx@$VERSION" version 2>/dev/null; then
              echo "✅ notebook-mdx@$VERSION verified successfully!"
              break
            else
              if [ $attempt -lt $max_attempts ]; then
                echo "⏳ Package not yet available, waiting ${delay}s before retry..."
                sleep $delay
              else
                echo "❌ Failed to verify notebook-mdx@$VERSION after $max_attempts attempts"
                echo "🔍 Checking if package exists with different version..."
                npm view "notebook-mdx" versions --json 2>/dev/null || echo "Package not found in registry"
                exit 1
              fi
            fi
          done

          echo "📦 Publication verified successfully!"

      - name: 📝 Enhance release notes
        if: github.event_name == 'release'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ needs.validate-release.outputs.tag_name }}"

          # Generate auto-generated release notes from GitHub
          echo "🤖 Generating auto-release notes..."
          if AUTO_NOTES=$(gh api repos/${{ github.repository }}/releases/generate-notes \
            --method POST \
            --field tag_name="$TAG" \
            --field target_commitish="${{ github.event.release.target_commitish }}" \
            --jq '.body' 2>/dev/null); then
            echo "✅ Auto-generated release notes successfully created"
          else
            echo "⚠️ Failed to generate auto-release notes, using fallback"
            AUTO_NOTES="## What's Changed

          Auto-generated release notes unavailable. Please see commit history for details."
          fi

          # Get contributors for this release
          echo "👥 Getting contributors for this release..."
          LAST_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMIT_RANGE="$LAST_TAG..$TAG"
          else
            # If no previous tag, get commits from last 30 days
            SINCE_DATE=$(date -d '30 days ago' '+%Y-%m-%d' 2>/dev/null || date -v-30d '+%Y-%m-%d' 2>/dev/null || echo '2024-01-01')
            COMMIT_RANGE="--since=$SINCE_DATE"
          fi

          # Get unique contributors (excluding bots)
          CONTRIBUTORS=$(git log $COMMIT_RANGE --format='%ae|%an' | sort -u | grep -v 'bot@' | grep -v 'noreply.github.com' || echo "")

          # Generate contributor avatars section
          CONTRIBUTOR_SECTION=""
          if [ -n "$CONTRIBUTORS" ]; then
            echo "📸 Generating contributor avatars..."
            CONTRIBUTOR_SECTION="

          ## 👥 Contributors

          Thanks to all the contributors who made this release possible:

          "
            
            # Add GitHub usernames and avatars
            while IFS='|' read -r email name; do
              if [ -n "$email" ] && [ -n "$name" ]; then
                # Try to get GitHub username from email
                GH_USER=$(gh api search/users --method GET --field q="$email" --jq '.items[0].login' 2>/dev/null || echo "")
                if [ -n "$GH_USER" ] && [ "$GH_USER" != "null" ]; then
                  CONTRIBUTOR_SECTION="$CONTRIBUTOR_SECTION<a href=\"https://github.com/$GH_USER\"><img src=\"https://github.com/$GH_USER.png\" width=\"50\" height=\"50\" alt=\"$name\" title=\"$name\" style=\"border-radius: 50%; margin: 0 5px;\"></a> "
                fi
              fi
            done <<< "$CONTRIBUTORS"
          fi

          # Add NPM package information
          NPM_SECTION="

          ## 📦 NPM Package

          \`\`\`bash
          npm install notebook-mdx@$VERSION
          \`\`\`

          - **NPM:** https://www.npmjs.com/package/notebook-mdx/v/$VERSION
          - **Unpkg:** https://unpkg.com/notebook-mdx@$VERSION/
          - **JSDelivr:** https://cdn.jsdelivr.net/npm/notebook-mdx@$VERSION/"

          # Combine all sections
          ENHANCED_NOTES="$AUTO_NOTES$CONTRIBUTOR_SECTION$NPM_SECTION"

          # Update release with enhanced notes
          echo "📝 Updating release notes..."
          if gh release edit "$TAG" --notes "$ENHANCED_NOTES"; then
            echo "✅ Release notes enhanced successfully!"
          else
            echo "⚠️ Failed to update release notes, but package was published successfully"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-repository-topics:
    name: 📋 Update Repository Topics
    runs-on: ubuntu-latest
    needs: [publish-npm]
    if: success()

    steps:
      - name: 📋 Update GitHub Topics
        uses: actions/github-script@v7
        with:
          script: |
            const topics = [
              'jupyter',
              'notebook', 
              'mdx',
              'react',
              'documentation',
              'typescript',
              'syntax-highlighting',
              'markdown',
              'remark',
              'rehype'
            ];

            await github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: topics
            });

  notify-success:
    name: 🎉 Success Notification
    runs-on: ubuntu-latest
    needs: [validate-release, test, build, publish-npm]
    if: success()

    steps:
      - name: 🎉 Success summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ needs.validate-release.outputs.tag_name }}"

          echo "🎉 **Release $TAG Published Successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tests passed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Package built**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Published to NPM**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Published Package" >> $GITHUB_STEP_SUMMARY
          echo "- [\`notebook-mdx@$VERSION\`](https://www.npmjs.com/package/notebook-mdx/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/$TAG)" >> $GITHUB_STEP_SUMMARY
          fi

  notify-failure:
    name: 🚨 Failure Notification
    runs-on: ubuntu-latest
    needs: [validate-release, test, build, publish-npm]
    if: failure()
    permissions:
      issues: write
      contents: read

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚨 Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const tag = '${{ needs.validate-release.outputs.tag_name }}';
            const workflowUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;

            let releaseUrl = '';
            if (context.eventName === 'release') {
              releaseUrl = context.payload.release.html_url;
            }

            const title = `🚨 Release ${tag} publication failed`;
            const body = `
            ## Release Publication Failure

            **Tag**: ${tag}
            **Version**: \`${version}\`
            ${releaseUrl ? `**Release**: [${tag}](${releaseUrl})` : ''}
            **Workflow Run**: [View Logs](${workflowUrl})

            ### What Happened
            ${releaseUrl ? 'The GitHub release was created successfully, but the npm publication failed.' : 'The npm publication workflow failed.'}

            ### Next Steps
            1. Check the [workflow logs](${workflowUrl}) for detailed error information
            2. Fix any issues (authentication, version conflicts, etc.)
            3. Re-run the workflow or manually publish the package

            ### Manual Publication Commands
            \`\`\`bash
            # If you need to publish manually:
            cd packages/notebook-mdx
            npm version ${version} --no-git-tag-version
            npm publish
            \`\`\`

            ---
            *This issue was automatically created by the release workflow.*
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release-failure', 'bug', 'npm']
            });
