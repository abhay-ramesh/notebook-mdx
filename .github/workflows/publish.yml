name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      id-token: write # For npm provenance

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package version
        run: |
          cd packages/notebook-mdx
          # Update version in package.json
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Verify package contents
        run: |
          cd packages/notebook-mdx
          npm pack --dry-run

      - name: Publish to NPM (Latest)
        if: ${{ !contains(steps.version.outputs.version, 'beta') && !contains(steps.version.outputs.version, 'alpha') && !contains(steps.version.outputs.version, 'rc') }}
        run: |
          cd packages/notebook-mdx
          npm publish --tag latest --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM (Prerelease)
        if: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'rc') }}
        run: |
          cd packages/notebook-mdx
          TAG=beta
          if [[ "${{ steps.version.outputs.version }}" == *"alpha"* ]]; then
            TAG=alpha
          elif [[ "${{ steps.version.outputs.version }}" == *"rc"* ]]; then
            TAG=rc
          fi
          npm publish --tag $TAG --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update GitHub Release with NPM link
        if: github.event_name == 'release'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.release.tag_name }}
          allowUpdates: true
          updateOnlyUnreleased: false
          body: |
            ${{ github.event.release.body }}

            ## ðŸ“¦ NPM Package

            ```bash
            npm install notebook-mdx@${{ steps.version.outputs.version }}
            ```

            - **NPM:** https://www.npmjs.com/package/notebook-mdx/v/${{ steps.version.outputs.version }}
            - **Unpkg:** https://unpkg.com/notebook-mdx@${{ steps.version.outputs.version }}/
            - **JSDelivr:** https://cdn.jsdelivr.net/npm/notebook-mdx@${{ steps.version.outputs.version }}/
          token: ${{ secrets.GITHUB_TOKEN }}

  update-repository-topics:
    name: Update Repository Topics
    runs-on: ubuntu-latest
    needs: publish
    if: success()

    steps:
      - name: Update GitHub Topics
        uses: actions/github-script@v7
        with:
          script: |
            const topics = [
              'jupyter',
              'notebook', 
              'mdx',
              'react',
              'documentation',
              'typescript',
              'syntax-highlighting',
              'markdown',
              'remark',
              'rehype'
            ];

            await github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: topics
            });
